*{NAME}
  termio - terminal-specific abstraction

*{DESCRIPTION}
  ${termio} is a library created out of necessity.  It is portable to many systems by the creation of a corresponding terminal-specific handler.

  Note that ${termio} is only intended to simplify a few specific actions.  These actions are getting terminal size and reading keyboard input.  ${termio} does not support terminals except those that follow the VT100 specification.

*{FUNCTIONS}
  blue{setCursor}(*{x}:magenta{number}, *{y}:magenta{number})
    Set the cursor position to (magenta{x},magenta{y}).  Equivalent to blue{io.write}(red{"\27[Y;XH"}).  Included for the sake of completeness and ease-of-use.  If the input and output streams do not point to a TTY, this will do nothing.

  blue{getCursor}(): magenta{number}, magenta{number}
    Get the cursor position.  This is not as easy to do as setting the cursor, requiring some terminal-specific commands.  This, along with blue{readKey}, is the reason for the usage of terminal handlers.

    If the terminal is not recognized, or the input and output streams do not point to a TTY, then (magenta{1}, magenta{1}) will be returned.

  blue{getTermSize}(): magenta{number}, magenta{number}
    Returns the dimensions of the terminal.  If the terminal is not recognized, or the input and output streams do not point to a TTY, then (magenta{1}, magenta{1}) will be returned.

  blue{readKey}(): red{string}, green{table}
    Reads one keypress from the standard input.  The green{table} contains two fields, magenta{ctrl} and magenta{alt}, both booleans, indicate whether the *{Control} or *{Alt} keys were pressed, respectively.  The red{string} return is the key that was pressed.  Unless it is a key such as *{Return}, *{Backspace}, or *{Delete}, it will be the character generated by the key press - so instead of red{"space"}, blue{readKey} would return red{" "}.

*{TERMINAL HANDLERS}
  Terminal handlers should be placed in #{lib/termio/TERM.lua}, and must contain a library with the following functions:
    
    blue{ttyIn}(): magenta{boolean}
      This function should return whether the input stream points to a TTY.

    blue{ttyOut}(): magenta{boolean}
      This function should return whether the output stream points to a TTY.

    blue{setRaw}(*{raw}:magenta{boolean})
      Set the terminal raw mode.  This must do the following:

        - Enable or disable line buffering on at least the terminal input
        - Enable or disable local echo

*{COPYRIGHT}
  ULOS Core Libraries copyright (c) 2021 Ocawesome101 under the DSLv2.

*{REPORTING BUGS}
  Bugs should be reported at @{https://github.com/ocawesome101/oc-ulos/issues}.
